name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    timeout-minutes: 10
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: '0.44.0'
          RYE_INSTALL_OPTION: '--yes'

      - name: Install dependencies
        run: make build && make install-dev

      - name: Run linting
        run: make lint-all

  build:
    timeout-minutes: 10
    name: build
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: '0.44.0'
          RYE_INSTALL_OPTION: '--yes'

      - name: Install dependencies
        run: make install-dev

      - name: Build package
        run: make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test:
    timeout-minutes: 30
    name: test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [lint, build]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye (Unix)
        if: runner.os != 'Windows'
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: '0.44.0'
          RYE_INSTALL_OPTION: '--yes'

      - name: Install Rye (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri "https://github.com/astral-sh/rye/releases/download/0.44.0/rye-x86_64-windows.exe" -OutFile "rye-installer.exe"
          .\rye-installer.exe --yes
          echo "$env:USERPROFILE\.rye\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Configure Rye Python version
        run: rye pin ${{ matrix.python-version }}

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: make install-dev
        
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          rye sync --all-features

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Run tests with coverage (Unix)
        if: runner.os != 'Windows'
        run: make test
        
      - name: Run tests with coverage (Windows)
        if: runner.os == 'Windows'
        run: |
          rye run pytest tests/ -v --cov=evolution_openai --cov-report=html --cov-report=term --cov-report=xml:coverage.xml --cov-report=json:coverage.json

      - name: Upload coverage artifacts (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            .coverage
            htmlcov/
            coverage.xml
            coverage.json

  docs:
    timeout-minutes: 10
    name: docs
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: '0.44.0'
          RYE_INSTALL_OPTION: '--yes'

      - name: Install dependencies
        run: make install-dev

      - name: Build documentation
        run: make docs

      - name: Check documentation links
        run: make docs-linkcheck

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build/html/

  coverage-badge:
    timeout-minutes: 5
    name: coverage-badge
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: Update Coverage Badge
        uses: we-cli/coverage-badge-action@main
        with:
          coverage-file: coverage.json

  test-examples:
    timeout-minutes: 20
    name: test-examples (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [test]
    if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.12"]  # Тестируем примеры только на двух версиях для экономии ресурсов
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye (Unix)
        if: runner.os != 'Windows'
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: '0.44.0'
          RYE_INSTALL_OPTION: '--yes'

      - name: Install Rye (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri "https://github.com/astral-sh/rye/releases/download/0.44.0/rye-x86_64-windows.exe" -OutFile "rye-installer.exe"
          .\rye-installer.exe --yes
          echo "$env:USERPROFILE\.rye\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Configure Rye Python version
        run: rye pin ${{ matrix.python-version }}

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: make install-dev
        
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: rye sync --all-features

      - name: Run basic examples (Unix)
        if: runner.os != 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: make run-examples
        
      - name: Run basic examples (Windows)
        if: runner.os == 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: rye run python examples/basic_usage.py

      - name: Run async examples (Unix)
        if: runner.os != 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: make run-async
        
      - name: Run async examples (Windows)
        if: runner.os == 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: rye run python examples/async_examples.py

      - name: Run streaming examples (Unix)
        if: runner.os != 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: make run-streaming
        
      - name: Run streaming examples (Windows)
        if: runner.os == 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: rye run python examples/streaming_examples.py

      - name: Run token management examples (Unix)
        if: runner.os != 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: make run-tokens
        
      - name: Run token management examples (Windows)
        if: runner.os == 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
        run: rye run python examples/token_management.py

      - name: Run foundation models examples (Unix)
        if: runner.os != 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
          EVOLUTION_PROJECT_ID: ${{ secrets.EVOLUTION_PROJECT_ID }}
        run: make run-foundation-models
        
      - name: Run foundation models examples (Windows)
        if: runner.os == 'Windows'
        env:
          EVOLUTION_KEY_ID: ${{ secrets.EVOLUTION_KEY_ID }}
          EVOLUTION_SECRET: ${{ secrets.EVOLUTION_SECRET }}
          EVOLUTION_BASE_URL: ${{ secrets.EVOLUTION_BASE_URL }}
          EVOLUTION_PROJECT_ID: ${{ secrets.EVOLUTION_PROJECT_ID }}
        run: rye run python examples/foundation_models_example.py